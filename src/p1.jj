options
{
  LOOKAHEAD= 1;

  STATIC = false;
}

PARSER_BEGIN(Parser)
import java.io.*;
import java.net.*;
//import java.text.ParseException;
import java.util.Scanner;

public class Parser
{
  static final int empresa = 35;

  // Aplica un parser al html y devuelve la estructura Nombre\tUltimo\n de las 35 empresas
  public static void main(String [] args) throws ParseException, TokenMgrError
  {
    URL url;
    InputStream is = null;
    BufferedReader br;
    BufferedWriter wr;
    String text;
    int i, input;
    double last;
    double value [] = new double [empresa];
    String name [] = new String [empresa];
    String lines [] = new String [empresa];
    String par [] = new String [2];
    //        NumberFormat format = NumberFormat.getInstance(Locale.FRANCE);
    try
    {
      //                String html = new Scanner(new URL("http://www.infobolsa.es/acciones/ibex35").openStream(), "UTF-8").useDelimiter("\\A").next();
      //                System.out.println(html);
      url = new URL("http://www.infobolsa.es/acciones/ibex35");
      URLConnection connection = url.openConnection();
      is = connection.getInputStream();
      //		        br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
      Parser parser = new Parser(is);
      text = parser.Start();
      System.out.println(text);
      lines = text.split("\n");
      br = new BufferedReader(new FileReader("src/last.txt"));
      System.out.println("Introduce Numero de Empresa a consultar, 1-35");
      for (i = 0; i < empresa; i++)
      {
        par = lines [i].split("\t");
        name [i] = par [0];
        value [i] = Double.parseDouble(par [1]);
        System.out.printf("%d. %s\t\t%.2f\n", i + 1, name [i], value [i]);
      }
      Scanner in = new Scanner(System.in);
      input = in.nextInt();
      //br.close();
      for (i = 0; i < input; i++)
      {
        text = (br.readLine());
      }
      br.close();
      par = text.split("\t");
      System.out.printf("Empresa %s, valor actual: %.2f anterior %.2f", name [input - 1], value [input - 1], Double.parseDouble(par [1]));
      wr = new BufferedWriter(new FileWriter("src/last.txt"));
      for (i = 0; i < empresa; i++)
      {
        wr.write(name [i] + "\t" + value [i] + "\n");
      }
      wr.close();
    }
    catch (MalformedURLException mue)
    {
      mue.printStackTrace();
    }
    catch (FileNotFoundException fnf)
    {
      fnf.printStackTrace();
    }
    catch (IOException ioe)
    {
      ioe.printStackTrace();
    }
    catch (ParseException poe)
    {
      //      System.out.println(ParserTokenManager.curLexState);
      poe.printStackTrace();
    }
  }
}

PARSER_END(Parser)

/*________________________*/
SKIP :
{
  < ~[ ] >
}

< TABLA >
SKIP :
{
  < ~[ ] >
}

< ROW >
SKIP :
{
  < ~[ ] >
}

< COL >
SKIP :
{
  < ~[ ] >
}

< NOMBRE >
SKIP :
{
  < ~[ ] >
}

< VALOR >
SKIP :
{
  < (~[ ">" ]) >
}

< LINK >
SKIP :
{
  < ~[ ">" ] >
}

/*________________________*/
TOKEN :
{
  < INI : "<!DOCTYPE html>" >
| < HTML : "<html>" >
| < FHTML : "</html>" >
| < TABLE : "<tbody" > : TABLA
}

< TABLA >
TOKEN [ IGNORE_CASE ] :
{
  < TROW : "<tr" > : ROW
| < FTABLA : "/tbody" > : DEFAULT
}

< ROW >
TOKEN [ IGNORE_CASE ] :
{
  < TCOL : "<td" > : COL
| < FROW : "/tr" > : TABLA
}

< COL >
TOKEN [ IGNORE_CASE ] :
{
  < TFCOL : "/td" > : ROW
| < TPRICE : "price" > : VALOR
| < TNAME : "name" > : NOMBRE
}

< VALOR >
TOKEN [ IGNORE_CASE ] :
{
  < TEXIT : ">" > : TEXT
}

< NOMBRE >
TOKEN [ IGNORE_CASE ] :
{
  < TLINK : "href" > : LINK
}

< LINK >
TOKEN [ IGNORE_CASE ] :
{
  < THREF : ">" > : TEXT
}

< TEXT >
TOKEN :
{
  < TTEXT : (~[ "<" ])* >
| < FTEXT : "<" > : COL
}

/*________________________*/
String Start() :
{
  String s = "";
  Token t, t1, t2, t3, t4, t5, t6;
}
{
  < INI > < HTML > < TABLE >
  (
    < TROW >
    (
      < TCOL >
      (
        (
          < TNAME > < TLINK > < THREF > t = < TTEXT > < FTEXT > < TFCOL >
          {
            s = s + t.image.trim() + "\t";
          }
        )
      |
        (
          < TPRICE > < TEXIT > t = < TTEXT > < FTEXT > < TFCOL >
          {
            String value = t.image.trim().replaceAll(",", ".");
            s = s + value + "\n";
          }
        )
      | (< TFCOL >)
      )
    )+
    < FROW >
  )+
  < FTABLA > < FHTML >
  {
    return s;
  }
}